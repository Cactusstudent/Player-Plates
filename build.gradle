import me.modmuss50.mpp.PublishOptions

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
    id "com.matthewprenger.cursegradle" version "1.4.0" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.2.1"
}

ext.isSnapshot = providers.environmentVariable("SNAPSHOT").map {it == "true"}.getOrElse(false)

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"
    apply plugin: 'com.matthewprenger.cursegradle'

    archivesBaseName = rootProject.archives_base_name
    version = "${mod_version}+mc${minecraft_version}${isSnapshot ? '-SNAPSHOT' : ''}"
    group = rootProject.maven_group

    repositories {
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    type = STABLE

    def makeOptions = { String name, boolean isCurse ->
        def options = (isCurse ? curseforgeOptions {} : modrinthOptions {}).get()
        options.minecraftVersions.add("${minecraft_version}")
        options.projectId = isCurse ? "${curseforge_id}" : "${modrinth_id}"
        options.accessToken = providers.environmentVariable(isCurse ? "CURSE_TOKEN" : "MODRINTH_TOKEN")
        options.displayName = "${project.name} ${name[0].toUpperCase() + name.substring(1)} ${mod_version}+mc${minecraft_version}"
        options.file = project.provider { project(":${name}").tasks.remapJar }.flatMap { it.archiveFile }
        options.modLoaders.add("Java 17")
        options.modLoaders.add("${name}")
        return options
    }

    curseforge("curseforgeForge") {
        from makeOptions("forge", true)
    }

    curseforge("curseforgeFabric") {
        from makeOptions("fabric", true)

        requires {
            slug = "fabric-api"
        }
    }

//    modrinth("modrinthForge") {
//        featured = true
//        from makeOptions("forge", false)
//    }
//
//    modrinth("modrinthFabric") {
//        featured = true
//        from makeOptions("fabric", false)
//
//        requires {
//            projectId = "P7dR8mSH" // Fabric api
//        }
//    }

    github {
        file = project.provider { project(":forge").tasks.remapJar }.flatMap { it.archiveFile }
        additionalFiles.from project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        repository = "${github_repo}"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
    }
}

//task publishMods
