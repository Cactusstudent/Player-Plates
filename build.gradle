import me.modmuss50.mpp.PublishOptions

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.2-SNAPSHOT" apply false
    id "com.matthewprenger.cursegradle" version "1.4.0" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.2.1"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"
    apply plugin: 'com.matthewprenger.cursegradle'

    def ENV = System.getenv()

    archivesBaseName = rootProject.archives_base_name
    version = "${mod_version}-build.${ENV.GITHUB_RUN_NUMBER ?: 9999}+mc${minecraft_version}"
    group = rootProject.maven_group

    repositories {
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    type = STABLE

    def optionsCurseforge = curseforgeOptions {
        projectId = "${curseforge_id}"
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        minecraftVersions.add("${minecraft_version}")
    }

    //    Todo: WILL ADD MODRINTH ONCE THEY FIX THEIR OVERREACHING TOS
    def optionsModrinth = modrinthOptions {
        projectId = "${modrinth_id}"
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add("${minecraft_version}")
        featured = true
    }

    def loaderOptions = { String name ->
        return curseforgeOptions = {
            displayName = "${project.name} ${project.name[0].toUpperCase() + project.name.substring(1)} ${mod_version}+mc${minecraft_version}"
            file = project.provider { project(":${name}").tasks.remapJar }.flatMap { it.archiveFile }
            modLoaders = []
            modLoaders.add("Java 17")
            modLoaders.add("${name}")
        }
    }

    // Better?
//    def loaderOptions = { String name ->
//        return {
//            displayName = "${project.name} ${project.name[0].toUpperCase() + project.name.substring(1)} ${mod_version}+mc${minecraft_version}"
//            file = project.provider { project(":${name}").tasks.remapJar }.flatMap { it.archiveFile }
//            modLoaders = []
//            modLoaders.add("Java 17")
//            modLoaders.add("${name}")
//        } as PublishOptions
//    }

    def forgeOptions = loaderOptions("forge")
    def fabricOptions = loaderOptions("fabric")

    println(forgeOptions.file)

    curseforge("curseforgeForge") {
        from optionsCurseforge
        from forgeOptions
    }

    curseforge("curseforgeFabric") {
        from optionsCurseforge
        from fabricOptions

        requires {
            slug = "fabric-api"
        }
    }

    modrinth("modrinthForge") {
        from optionsModrinth
        from forgeOptions
    }

    modrinth("modrinthFabric") {
        from optionsModrinth
        from fabricOptions

        requires {
            projectId = "P7dR8mSH" // Fabric api
        }
    }

    github {
        file = project.provider { project(":forge").tasks.jar }.flatMap { it.archiveFile }
        additionalFiles.from project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        repository = "${github_repo}"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
    }
}

//task publishMods